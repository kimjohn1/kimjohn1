BootStrap: docker
From: ubuntu

%runscript
	#/Project/SCIRun/bin/SCIRun/SCIRun -0
    dbus-run-session /Project/SCIRun/bin/SCIRun/SCIRun -0

    #Notes:

    #The container can be built with:
    #singularity build --fakeroot --force --sandbox scirun_pt SCIRun_PT_Container.def
    #or
    #singularity build --fakeroot --force scirun_pt.sif SCIRun_PT_Container.def

    #Run the .sif container with:
    #singularity shell --bind /run,picInputs:/Project/picInputs,simulations:/Project/src/picongpu/share/picongpu/examples,scratch:/Project/scratch scirun_pt.sif
    #or
    #singularity run --bind /run,picInputs:/Project/picInputs,simulations:/Project/src/picongpu/share/picongpu/examples,scratch:/Project/scratch scirun_pt.sif

    #Run the sandbox container with:
    #singularity shell --fakeroot --writable --bind /run,picInputs:/Project/picInputs,simulations:/Project/src/picongpu/share/picongpu/examples,scratch:/Project/scratch scirun_pt
    #or
    #singularity run --fakeroot --writable --bind /run,picInputs:/Project/picInputs,simulations:/Project/src/picongpu/share/picongpu/examples,scratch:/Project/scratch scirun_pt

%files
    /etc/localtime /etc/localtime

%post
    export DEBIAN_FRONTEND=noninteractive

    # Install dependencies
    cd /home
    apt update
    apt -y install build-essential
    apt -y install wget
    apt -y install curl
    apt -y install python3
    apt -y install cmake file cmake-curses-gui
    apt -y install libgl1-mesa-dev
	apt -y install libglfw3-dev libglu1-mesa-dev
    apt -y install libffi-dev
    apt -y install git
    apt -y install rsync
    apt -y install qt6-base-dev
    apt -y install qt6-tools-dev
    apt -y install libxkbcommon-dev
    apt -y install xapp          #does away with an error report when SCIRun starts

    mkdir /Project

    # Install CUDA Toolkit - this installs Toolkit version 12.1
        cd /home
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin
        mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600
        wget https://developer.download.nvidia.com/compute/cuda/12.1.0/local_installers/cuda-repo-ubuntu2204-12-1-local_12.1.0-530.30.02-1_amd64.deb
        dpkg -i cuda-repo-ubuntu2204-12-1-local_12.1.0-530.30.02-1_amd64.deb
        cp /var/cuda-repo-ubuntu2204-12-1-local/cuda-*-keyring.gpg /usr/share/keyrings/
        apt update
        DEBIAN_FRONTEND=noninteractive apt -y install cuda
        cd /home

    # Install PIConGPU
    # Create directories
        mkdir -p /Project/src/openPMD-api /Project/src/openPMD-api-build
        mkdir -p /Project/src/pngwriter /Project/src/pngwriter-build
        mkdir -p /Project/src/ADIOS2 /Project/src/ADIOS2-build
        mkdir -p /Project/lib/openPMD-api
        mkdir -p /Project/lib/pngwriter
        mkdir -p /Project/lib/ADIOS2
        mkdir -p /Project/picInputs
        mkdir -p /Project/scratch/runs

    # Set system variables
        export SCRATCH=/Project/scratch
        export PICSRC=/Project/src/picongpu
        export PIC_EXAMPLES=$PICSRC/share/picongpu/examples
        #export PIC_BACKEND="omp2b:native"
        #export PIC_BACKEND="cuda:61"
        #export PIC_BACKEND="cuda:86"
        export PIC_BACKEND="cuda:89"
        export PIC_CLONE=/Project/picInputs
        export PIC_CFG=etc/picongpu
        export PIC_OUTPUT=$SCRATCH/runs
        export PATH=$PATH:$PICSRC:$PICSRC/bin:$PICSRC/src/tools/bin
        export PYTHONPATH=$PICSRC/lib/python:$PYTHONPATH

    # Load gcc - accomplished in Dependencies
    #    apt -y install build-essential

    # Load CMake - accomplished in Dependencies
    #    apt -y install cmake file cmake-curses-gui

    # Load openmpi
        apt -y install libopenmpi-dev

    # Load zlib
        apt install zlib1g-dev

    # Load boost Installs version 1.74
        apt -y install libboost-program-options-dev libboost-filesystem-dev libboost-system-dev libboost-math-dev libboost-serialization-dev

    # Load git - accomplished in Dependencies
    #    apt -y install git

    # Load rsync - accomplished in Dependencies
    #    apt -y install rsync

    # Retrieve PIConGPU source code from the kimjohn1 repository and change to the Vis branch
        cd /Project/src
        git clone https://github.com/kimjohn1/picongpu.git
        cd picongpu
        git checkout container_2
        cd /Project

    # Load libpng
        cd /home
        apt -y install libpng-dev

    # Load pngwriter
        cd /Project/src
        git clone https://github.com/pngwriter/pngwriter.git
        cd pngwriter-build
        cmake -DCMAKE_INSTALL_PREFIX=/Project/lib/pngwriter /Project/src/pngwriter
        make install -j16
        cd /Project

        export CMAKE_PREFIX_PATH=/Project/lib/pngwriter:$CMAKE_PREFIX_PATH
        export LD_LIBRARY_PATH=/Project/lib/pngwriter/lib:$LD_LIBRARY_PATH

    # Load hdf5 - this installs version 1.10.4
        cd /home
        apt -y install libhdf5-openmpi-dev

    # Load ADIOS2 - this installs the latest version
        cd /Project/src
        git clone https://github.com/ornladios/ADIOS2.git ADIOS2
        cd ADIOS2-build
        cmake -DCMAKE_INSTALL_PREFIX="/Project/lib/ADIOS2" -DADIOS2_USE_Fortran=OFF -DADIOS2_USE_PNG=OFF -DADIOS2_USE_BZip2=OFF -DADIOS2_USE_SST=ON /Project/src/ADIOS2
        make install -j16
        cd /Project

        export CMAKE_PREFIX_PATH=/Project/lib/ADIOS2:$CMAKE_PREFIX_PATH
        export LD_LIBRARY_PATH=/Project/lib/ADIOS2/lib:$LD_LIBRARY_PATH

    # Load openpmd - Loads openPMD version 0.15.0
        cd /Project/src
        git clone https://github.com/openPMD/openPMD-api.git
        cd openPMD-api-build
        cmake -DCMAKE_INSTALL_PREFIX=/Project/lib/openPMD-api -DopenPMD_USE_MPI=ON -DopenPMD_USE_ADIOS2=ON -DopenPMD_USE_HDF5=ON /Project/src/openPMD-api
        make install -j16
        cd /Project

        export CMAKE_PREFIX_PATH=/Project/lib/openPMD-api:$CMAKE_PREFIX_PATH
        export LD_LIBRARY_PATH=/Project/lib/openPMD-api/lib:$LD_LIBRARY_PATH

        #export TBG_SUBMIT="bash"                              #delete these 2 lines when verified they are not needed
        #export TBG_TPLFILE="etc/picongpu/bash/mpirun.tpl"

    # Install Qt - this installs version 5.15.2 or version 6.3.1
        cd /Project
        apt -y install python3-pip
        pip3 install aqtinstall
        mkdir /Project/Qt
        #python3 -m aqt install-qt --outputdir /Project/Qt linux desktop 5.15.2 gcc_64
    	python3 -m aqt install-qt --outputdir /Project/Qt linux desktop 6.3.1 gcc_64
    

    # Install SCIRun - retrieve source code from the kimjohn1 repository and change to the asynch-Container branch
        export PIC_CLONE=/Project/picInputs
        export PIC_CFG=etc/picongpu
        export PIC_OUTPUT=$SCRATCH/runs
        export CMAKE_PREFIX_PATH=/Project/Qt/6.3.1/gcc_64/lib/cmake:$CMAKE_PREFIX_PATH

        cd /Project
        git clone https://github.com/kimjohn1/SCIRun.git
        cd /Project/SCIRun
        git checkout container_2
        cd /Project/SCIRun/bin
        cmake -DSCIRUN_QT_MIN_VERSION=6.3.1 -DQt_PATH=/Project/Qt/6.3.1/gcc_64 -DWITH_OSPRAY=OFF ../Superbuild
        make -j16

%environment
    export PATH=/usr/local/cuda-12.1/bin${PATH:+:${PATH}}
    export LC_ALL=C
#    export PATH=/Project/SCIRun/bin/SCIRun:$PATH
    export NO_AT_BRIDGE=1            #does away with an annoying warning when SCIRun starts
    export OMPI_ALLOW_RUN_AS_ROOT=1
    export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1

